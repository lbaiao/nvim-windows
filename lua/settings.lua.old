vim.cmd([[set nocompatible
filetype off
set t_Co=256
if has("win32")
  let $PATH = "C:\\Program\ Files\\Git\\usr\\bin;" . $PATH
 "let &shell='C:\Program Files\Git\bin\bash.exe'
 "let &shellcmdflag = '-c'
 "let &shellredir = '>%s 2>&1'
 "set shellquote= shellxescape=
 "" set noshelltemp
 "set shellxquote=
 "let &shellpipe='2>&1| tee'
 "let $TMP="/tmp"
endif

call plug#begin('~/AppData/Local/nvim/plugged')
" Python autocomplete
"if has('nvim')
  "Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"else
  "Plug 'Shougo/deoplete.nvim'
  "Plug 'roxma/nvim-yarp'
  "Plug 'roxma/vim-hug-neovim-rpc'
"endif
"Plug 'zchee/deoplete-jedi'
" Git wrapper
Plug 'tpope/vim-fugitive'
" Directory sidebar tree view
Plug 'scrooloose/nerdtree'
" Icons
Plug 'ryanoasis/vim-devicons'
" Fuzzy file finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" Root the project dir to folder w/ .git if applicable
Plug 'mhinz/vim-startify'
" lucas
Plug 'vim-scripts/indentpython.vim'
" Auto completion
Plug 'neovim/nvim-lspconfig'
" Jupyter Notebook extension
" Plug 'luk400/vim-jukit'
Plug 'preservim/nerdcommenter'
Plug 'tell-k/vim-autopep8'
Plug 'kien/ctrlp.vim'
" Powerline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'preservim/tagbar'
Plug 'sheerun/vim-polyglot'
" Debugging
Plug 'Chiel92/vim-autoformat'
" C# 
Plug 'OmniSharp/omnisharp-vim'
Plug 'nickspoons/vim-sharpenup'
" Linting/error highlighting
Plug 'dense-analysis/ale'
" Auto close brackets
Plug 'tmsvg/pear-tree'
" LaTEX
Plug 'lervag/vimtex'
" ==== Color schemes ==== "
"Plug 'sonph/onehalf', { 'rtp': 'vim' }
"Plug 'dracula/vim', { 'as': 'dracula' }
"Plug 'morhetz/gruvbox'
Plug 'arcticicestudio/nord-vim'
" === Plug END === "
call plug#end()

set nofoldenable
filetype plugin indent on

let g:python2_host_prog = 'C:\Users\lucas\anaconda3\envs\python2\python.exe'
let g:python3_host_prog = 'C:\Users\lucas\anaconda3\envs\python3\python.exe'

filetype plugin indent on    " required
syntax on
set number
set noswapfile
set hlsearch
set ignorecase
set incsearch


" gruvbox stuff
let g:gruvbox_italic=1
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif
"autocmd vimenter * ++nested colorscheme gruvbox
"
" ===== color scheme ==== "
"colorscheme onehalfdark
"colorscheme dracula
colorscheme nord
"colorscheme 
"colorscheme gruvbox
"
" make background transparent
"hi Normal guibg=NONE ctermbg=NONE

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
set splitbelow
set splitright
" NERDTree mappings and settings
nnoremap <C-b> :NERDTreeToggle<CR>
" do not select numbers when selecting with mouse
set mouse=a
map <leader>y "+y
" vim python autoimport
nmap <silent> <S-CR>   :ImportSymbol<CR>
imap <silent> <S-CR>   <Esc>:ImportSymbol<CR>a
" tag bar mapping
nmap <F8> :TagbarToggle<CR>
let g:tagbar_autofocus=1
let g:tagbar_autoclose=1
" ctrlp settings
let g:ctrlp_show_hidden = 1
set wildignore+=*/data/*,*.so,*.swp,*.zip,*/node_modules/*    " MacOSX/Linux
" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gVzv:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gVzv:call setreg('"', old_reg, old_regtype)<CR>
" ============ coc.nvim configurations ==================================
" TextEdit might fail if hidden is not set.
set hidden
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup
" Give more space for displaying messages.
set cmdheight=2
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in peview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end
" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)
" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
"======================= VIM-AIRLINE CONFIGS ==============
"nnoremap <C-S-Tab> :bp<cr>
"nnoremap <C-Tab>   :bn<cr>
"nnoremap <leader>h :bp<cr>
"nnoremap <leader>l :bn<cr>
let g:airline#extensions#tabline#enabled = 1
"let g:airline_theme='nord'
let g:airline_powerline_fonts = 1
" autoformat settings
nmap <S-A-f> :Autoformat<CR>
"======================= VIMTEX ===============================
let g:vimtex_view_general_viewer = 'zathura'
"let g:tex_flavor = "latex"
if empty(v:servername) && exists('*remote_startserver')
  call remote_startserver('VIM')
endif
"======================= VIM-JUKIT CONFIGS ====================
"let g:jukit_html_viewer = 'brave-browser'
"let g:jukit_mappings = 0
"nnoremap <leader>cs :call jukit#SendUntilCurrentSection()<cr>
"nnoremap <leader><cr> :call jukit#SendLine()<cr>
"vnoremap <leader><cr> :<C-U>call jukit#SendSelection()<cr>
"nnoremap <leader>py :call jukit#PythonSplit()<cr>
"nnoremap <leader>sp :call jukit#WindowSplit()<cr>
"nnoremap <leader><space> :call jukit#SendSection()<cr>
"nnoremap <leader>all :call jukit#SendAll()<cr>
"nnoremap <leader>mm :call jukit#NewMarker()<cr>
"nnoremap <leader>np :call jukit#NotebookConvert()<cr>
"nnoremap <leader>ht :call jukit#SaveNBToFile(0,1,'html')<cr>
"nnoremap <leader>rht :call jukit#SaveNBToFile(1,1,'html')<cr>
"nnoremap <leader>pd :call jukit#SaveNBToFile(0,1,'pdf')<cr>
"nnoremap <leader>rpd :call jukit#SaveNBToFile(1,1,'pdf')<cr>
"====================== C# ====================================
"let g:ale_sign_error = '•"'
"let g:ale_sign_warning = '•'
"let g:ale_sign_info = '·'
"let g:ale_sign_style_error = '·'
"let g:ale_sign_style_warning = '·'
let g:ale_linters = { 'cs': ['OmniSharp'] }
"let g:OmniSharp_popup_position = 'peek'
"if has('nvim')
  "let g:OmniSharp_popup_options = {
  "\ 'winhl': 'Normal:NormalFloat'
  "\}
"else
  "let g:OmniSharp_popup_options = {
  "\ 'highlight': 'Normal',
  "\ 'padding': [0, 0, 0, 0],
  "\ 'border': [1]
  "\}
"endif
"let g:OmniSharp_highlight_groups = {
"\ 'ExcludedCode': 'NonText'
"\}
let g:ale_disable_lsp = 1
let g:ale_set_highlights = 1
let b:ale_linters = ['cs']
]])
